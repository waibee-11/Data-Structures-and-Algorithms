Problem Statement:
- You are given an array of only 0's, 1's and 2's
- You have to sort the array

Approach 1:

Logic:
- Use another array temp of length 3 to store the number 0's, 1's and 2's in the main array
- Then, using a loop, make the first temp[0] elements 0, the next temp[1] elements 1, and the next temp[2] elements 2

Pseudo-code:
int temp[3] = {0,0,0};
for (int i = 0; i < N; i++){
  temp[arr[i]] += 1;
}
USING FOR LOOPS, MAKE THE NECESSARY CHANGES

TC: O(N) since we don't have nested for loops

Approach 2: DUTCH NATIONAL FLAG ALGORITHM

Logic:
- You have 3 pointers low, mid, high
- 3 basic rules
  - arr[0, low - 1] = 0
  - arr[low, mid - 1] = 1
  - arr[mid, high] is unsorted
  - arr[high + 1, n - 1] = 2
- Initially, youu treat the entire array as unsorted with low = mid = 0 and high = n - 1
- Then, you keep checking arr[mid] for above conditions and keep updating low, mid, high and swap elements as needed

Pseudo-code is the same as the logic

TC: O(N) since we are going to traverse through the array only once
