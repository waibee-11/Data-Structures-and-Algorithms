Brute Force:

Logic:
- Create a temp array with all non-zero elements.
- Then make the last (n - len(temp)) items equal to 0. 
- Then add all non-zero elements to the start.

Pseudo-code:
vector<int> temp;
for (int i = 0; i < n; i++){
  if (arr[i] != 0){
    temp.push_back(arr[i]);
  }
}

for (int i = n - temp.size(); i < n; i++){
  arr[i] = 0;
}

for (int i = 0; i < temp.size(); i++){
  arr[i]  = temp.at(i);
}

TC: O(2n) because we are first traversing through the first n items, then (n - temp.size()) items and then (temp.size()) items

Optimum Approach:

Logic: 
- Use 2 pointer approach.
- Set i = 0 and j = 1. If j is on a zero item, move it forward.
- If i on a non-zero item, move it forward. 
- If i == j, then move j forward.
- If i is on a zero and j is on a non-zero, then swap
- If j goes out of bounds, we are done.

Pseudo-code:
int i = 0;
int j = 1;
while (i < n && j < n){
  if (arr[j] == 0) j++;
  else if (i == j) j++;
  else if (arr[i] != 0) i++;
  else {
    swap(arr[i], arr[j]);
    i++;
    j++;
  }
}

TC: O(n) since we are traversing through the array only once.
