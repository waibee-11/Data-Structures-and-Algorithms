Brute Force:

Logic:
- Do a linear search on the 2D array

Pseudo-code:
for (int i = 0; i < n; i++){
  for (int j = 0; j < m; j++){
    if (mat[i][j] == X){
      return 1;
    }
  }
}
return 0;

TC: O(n*m) since we are running the inner loop m times and the outer loop n times

Better Approach:

Logic:
- Use Binary search instead of doing linear search on every row
- I will update this solution once I learn binary search

Optimum Approach:

Logic:
- We are using the fact that every row and column is sorted
- We are at the last element of the first row [i = 0, j = m - 1]
- We make comparisons. If X < cur, then move left [ j -- ]
- If X > cur, then move down [ i ++ ]
- If X = cur, return 1
- If i or j go out of bounds, then return 0

Pseudo-code:
int i = 0;
int j = m - 1;
while (i < n && j > -1){
  if (mat[i][j] == X) {
    return 1;
  }
  else if (mat[i][j] > X){
    j--;
  }
  else {
    i++;
  }
}
return 0;

TC: O(n*m / 2) since we will we traversing through only half the elements in the worst case

Optimum Approach 2:

Logic:
- Here we consider that the first element of every row is greater than the last element of the previous row.
- You perform binary search on the entire 2D matrix. I will update this once I learn Binary search.
